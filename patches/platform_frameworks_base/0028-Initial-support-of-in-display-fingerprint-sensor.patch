From 5e0dc919ba8a665582c3478c5c018fd73b7da24b Mon Sep 17 00:00:00 2001
From: Pierre-Hugues Husson <phh@phh.me>
Date: Sun, 24 Mar 2019 22:48:39 +0100
Subject: [PATCH] Initial support of in-display fingerprint sensor

Tested on Mi 9.
Here are the list of things that are device-specific:
- touchscreen control (possibly not needed for all devices)
- how to get position and size of green circle?
- fingerprint control (tell the fingerprint sensor the green circle is
ready, and what is its brightness)
---
 services/core/Android.bp                      |   1 +
 .../fingerprint/AuthenticationClient.java     |   6 +
 .../server/fingerprint/EnrollClient.java      |   9 +
 .../server/fingerprint/FacolaView.java        | 192 ++++++++++++++++++
 4 files changed, 208 insertions(+)
 create mode 100644 services/core/java/com/android/server/fingerprint/FacolaView.java

diff --git a/services/core/Android.bp b/services/core/Android.bp
index 48be3c4921c..46f6035fb74 100644
--- a/services/core/Android.bp
+++ b/services/core/Android.bp
@@ -44,7 +44,8 @@ java_library_static {
         "android.hardware.vibrator-V1.0-java",
         "android.hardware.configstore-V1.0-java",
         "android.hardware.contexthub-V1.0-java",
-        "vendor.lineage.trust-V1.0-java",
+        "vendor.xiaomi.hardware.fingerprintextension-V1.0-java",
+	"vendor.lineage.trust-V1.0-java",
     ],
 }
 
diff --git a/services/core/java/com/android/server/fingerprint/AuthenticationClient.java b/services/core/java/com/android/server/fingerprint/AuthenticationClient.java
index afd1a94bf50..22be0ead478 100644
--- a/services/core/java/com/android/server/fingerprint/AuthenticationClient.java
+++ b/services/core/java/com/android/server/fingerprint/AuthenticationClient.java
@@ -54,6 +54,8 @@ public abstract class AuthenticationClient extends ClientMonitor {
     private final FingerprintManager mFingerprintManager;
     protected boolean mDialogDismissed;
 
+    private FacolaView mFacola;
+
     // Receives events from SystemUI and handles them before forwarding them to FingerprintDialog
     protected IBiometricPromptReceiver mDialogReceiver = new IBiometricPromptReceiver.Stub() {
         @Override // binder call
@@ -94,8 +96,10 @@ public abstract class AuthenticationClient extends ClientMonitor {
         mBundle = bundle;
         mDialogReceiverFromClient = dialogReceiver;
         mStatusBarService = statusBarService;
+                         .getSystemService(Context.FINGERPRINT_SERVICE);
         mFingerprintManager = (FingerprintManager) getContext()
                 .getSystemService(Context.FINGERPRINT_SERVICE);
+        mFacola = new FacolaView(context);
     }
 
     @Override
@@ -231,8 +235,10 @@ public abstract class AuthenticationClient extends ClientMonitor {
             }
             result |= true; // we have a valid fingerprint, done
             resetFailedAttempts();
             onStop();
         }
+        if(result == true) mFacola.hide();
         return result;
     }
 
@@ -246,6 +252,7 @@ public abstract class AuthenticationClient extends ClientMonitor {
             Slog.w(TAG, "start authentication: no fingerprint HAL!");
             return ERROR_ESRCH;
         }
+        mFacola.show();
         onStart();
         try {
             final int result = daemon.authenticate(mOpId, getGroupId());
@@ -278,7 +285,7 @@ public abstract class AuthenticationClient extends ClientMonitor {
             Slog.w(TAG, "stopAuthentication: already cancelled!");
             return 0;
         }
-
+        mFacola.hide();
         onStop();
         IBiometricsFingerprint daemon = getFingerprintDaemon();
         if (daemon == null) {
diff --git a/services/core/java/com/android/server/fingerprint/EnrollClient.java b/services/core/java/com/android/server/fingerprint/EnrollClient.java
index c9efcf2fd68..770faa073c4 100644
--- a/services/core/java/com/android/server/fingerprint/EnrollClient.java
+++ b/services/core/java/com/android/server/fingerprint/EnrollClient.java
@@ -33,6 +33,7 @@ import java.util.Arrays;
  * A class to keep track of the enrollment state for a given client.
  */
 public abstract class EnrollClient extends ClientMonitor {
+    private final FacolaView mFacola;
     private static final long MS_PER_SEC = 1000;
     private static final int ENROLLMENT_TIMEOUT_MS = 60 * 1000; // 1 minute
     private byte[] mCryptoToken;
@@ -42,6 +43,7 @@ public abstract class EnrollClient extends ClientMonitor {
             boolean restricted, String owner) {
         super(context, halDeviceId, token, receiver, userId, groupId, restricted, owner);
         mCryptoToken = Arrays.copyOf(cryptoToken, cryptoToken.length);
+        mFacola = new FacolaView(context);
     }
 
     @Override
@@ -69,6 +71,7 @@ public abstract class EnrollClient extends ClientMonitor {
         MetricsLogger.action(getContext(), MetricsEvent.ACTION_FINGERPRINT_ENROLL);
         try {
             receiver.onEnrollResult(getHalDeviceId(), fpId, groupId, remaining);
+            if(remaining == 0) mFacola.hide();
             return remaining == 0;
         } catch (RemoteException e) {
             Slog.w(TAG, "Failed to notify EnrollResult:", e);
@@ -83,6 +86,11 @@ public abstract class EnrollClient extends ClientMonitor {
             Slog.w(TAG, "enroll: no fingerprint HAL!");
             return ERROR_ESRCH;
         }
+        Slog.w(TAG, "Starting enroll");
+
+        mFacola.show();
+
+
         final int timeout = (int) (ENROLLMENT_TIMEOUT_MS / MS_PER_SEC);
         try {
             final int result = daemon.enroll(mCryptoToken, getGroupId(), timeout);
diff --git a/services/core/java/com/android/server/fingerprint/FacolaView.java b/services/core/java/com/android/server/fingerprint/FacolaView.java
new file mode 100644
index 00000000000..ec336fe337c
--- /dev/null
+++ b/services/core/java/com/android/server/fingerprint/FacolaView.java
@@ -0,0 +1,192 @@
+/**
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.server.fingerprint;
+
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.content.Context;
+import android.view.View.OnTouchListener;
+import android.view.View;
+import android.widget.ImageView;
+import android.view.MotionEvent;
+import android.util.Slog;
+
+import android.view.WindowManager;
+import android.graphics.PixelFormat;
+import android.view.Gravity;
+
+import java.io.PrintWriter;
+
+import vendor.xiaomi.hardware.fingerprintextension.V1_0.IXiaomiFingerprint;
+
+import android.os.ServiceManager;
+
+public class FacolaView extends ImageView implements OnTouchListener {
+    private final int mX, mY, mW, mH;
+    private final Paint mPaintFingerprint = new Paint();
+    private final Paint mPaintShow = new Paint();
+    private IXiaomiFingerprint mXiaomiFingerprint = null;
+    private boolean mInsideCircle = false;
+    private final WindowManager.LayoutParams mParams = new WindowManager.LayoutParams();
+
+    private final static float UNTOUCHED_DIM = .1f;
+    private final static float TOUCHED_DIM = .9f;
+
+    private final WindowManager mWM;
+    FacolaView(Context context) {
+        super(context);
+
+        String[] location = android.os.SystemProperties.get("persist.vendor.sys.fp.fod.location.X_Y", "").split(",");
+        String[] size = android.os.SystemProperties.get("persist.vendor.sys.fp.fod.size.width_height", "").split(",");
+        if(size.length == 2 && location.length == 2) {
+            mX = Integer.parseInt(location[0]);
+            mY = Integer.parseInt(location[1]);
+            mW = Integer.parseInt(size[0]);
+            mH = Integer.parseInt(size[1]);
+        } else {
+            mX = -1;
+            mY = -1;
+            mW = -1;
+            mH = -1;
+        }
+
+        mPaintFingerprint.setAntiAlias(true);
+        mPaintFingerprint.setColor(Color.GREEN);
+
+        mPaintShow.setAntiAlias(true);
+        mPaintShow.setColor(Color.argb(0x18, 0x00, 0xff, 0x00));
+        setOnTouchListener(this);
+        mWM = (WindowManager) getContext().getSystemService(Context.WINDOW_SERVICE);
+        Slog.d("PHH-Enroll", "Created facola...");
+        try {
+            if(mW != -1)
+                mXiaomiFingerprint = IXiaomiFingerprint.getService();
+        } catch(Exception e) {
+            Slog.d("PHH-Enroll", "Failed getting xiaomi fingerprint service", e);
+        }
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        super.onDraw(canvas);
+        Slog.d("PHH-Enroll", "Drawing at " + mX + ", " + mY + ", " + mW + ", " + mH);
+        //TODO w!=h?
+        if(mInsideCircle) {
+            try {
+                int nitValue = 3;
+                if(mXiaomiFingerprint != null)
+                    mXiaomiFingerprint.extCmd(0xa, nitValue);
+            } catch(Exception e) {
+                Slog.d("PHH-Enroll", "Failed calling xiaomi fp extcmd");
+            }
+
+            canvas.drawCircle(mW/2, mH/2, (float) (mW/2.0f), this.mPaintFingerprint);
+        } else {
+            try {
+                if(mXiaomiFingerprint != null)
+                    mXiaomiFingerprint.extCmd(0xa, 0);
+            } catch(Exception e) {
+                Slog.d("PHH-Enroll", "Failed calling xiaomi fp extcmd");
+            }
+            canvas.drawCircle(mW/2, mH/2, (float) (mW/2.0f), this.mPaintShow);
+        }
+    }
+
+    @Override
+    public boolean onTouch(View v, MotionEvent event) {
+        float x = event.getAxisValue(MotionEvent.AXIS_X);
+        float y = event.getAxisValue(MotionEvent.AXIS_Y);
+
+        boolean newInside = (x > 0 && x < mW) && (y > 0 && y < mW);
+        if(event.getAction() == MotionEvent.ACTION_UP)
+            newInside = false;
+
+        Slog.d("PHH-Enroll", "Got action " + event.getAction() + ", x = " + x + ", y = " + y + ", inside = " + mInsideCircle + "/" + newInside);
+        if(newInside == mInsideCircle) return mInsideCircle;
+        mInsideCircle = newInside;
+
+        invalidate();
+
+        if(!mInsideCircle) {
+            mParams.screenBrightness = .0f;
+            mParams.dimAmount = UNTOUCHED_DIM;
+            mWM.updateViewLayout(this, mParams);
+            return false;
+        }
+
+        mParams.dimAmount = TOUCHED_DIM;
+        mParams.screenBrightness = 1.0f;
+        mWM.updateViewLayout(this, mParams);
+
+        return true;
+    }
+
+    public void show() {
+        if(mX == -1 || mY == -1 || mW == -1 || mH == -1) return;
+
+        try {
+            PrintWriter writer = new PrintWriter("/sys/devices/virtual/touch/tp_dev/fod_status", "UTF-8");
+            writer.println("1");
+            writer.close();
+        } catch(Exception e) {
+            Slog.d("PHH-Enroll", "Failed setting fod status for touchscreen");
+        }
+
+        mParams.x = mX;
+        mParams.y = mY;
+
+        mParams.height = mW;
+        mParams.width = mH;
+        mParams.format = PixelFormat.TRANSLUCENT;
+
+        mParams.type = WindowManager.LayoutParams.TYPE_VOLUME_OVERLAY;
+        mParams.setTitle("Fingerprint on display");
+        mParams.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE |
+            WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH |
+            WindowManager.LayoutParams.FLAG_DIM_BEHIND |
+            WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN;
+        mParams.dimAmount = UNTOUCHED_DIM;
+
+        mParams.packageName = "android";
+
+        mParams.gravity = Gravity.TOP | Gravity.LEFT;
+        mWM.addView(this, mParams);
+
+    }
+
+    public void hide() {
+        if(mX == -1 || mY == -1 || mW == -1 || mH == -1) return;
+
+        try {
+            if(mXiaomiFingerprint != null)
+                mXiaomiFingerprint.extCmd(0xa, 0);
+        } catch(Exception e) {
+            Slog.d("PHH-Enroll", "Failed calling xiaomi fp extcmd");
+        }
+        try {
+            PrintWriter writer = new PrintWriter("/sys/devices/virtual/touch/tp_dev/fod_status", "UTF-8");
+            writer.println("0");
+            writer.close();
+        } catch(Exception e) {
+            Slog.d("PHH-Enroll", "Failed setting fod status for touchscreen");
+        }
+
+        Slog.d("PHH-Enroll", "Removed facola");
+        mWM.removeView(this);
+    }
+}
